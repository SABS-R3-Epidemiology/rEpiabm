name: "Unit tests: macOS"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '**'

jobs:

  test:
    name: tests on macOS with R ${{ matrix.R }}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        R: [ '4.1.0' ]

    steps:

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.R }}
          Ncpus: 2
      
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          
      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
        shell: Rscript {0}
        
      - name: cache R installed packages
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-R${{ matrix.R }}-2-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-R${{ matrix.R }}-2-
      
      - name: Install packages
        run: |
          install.packages(c("devtools"))
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

      - name: setup r-reticulate venv
        shell: Rscript {0}
        run: |

          library(reticulate)

          path_to_venv <- virtualenv_create(
            envname = "r-reticulate",
            python = Sys.which("python"), # placed on PATH by the setup-python action
            packages = c(
              "pandas", "matplotlib", "numpy"
            )
          )

          writeLines(
            paste0("RETICULATE_PYTHON=", virtualenv_python(path_to_venv)),
            Sys.getenv("GITHUB_ENV"))

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: |
          options(crayon.enabled = TRUE)
          rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "error", check_dir = "check")
        shell: Rscript {0}

      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash
